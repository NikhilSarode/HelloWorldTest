pipeline {
    agent any

    environment {
        K8S_MANIFEST_DIR = 'k8s'
        LIQUIBASE_JOB_NAME = 'liquibase-job'       // Update if your job name differs
        LIQUIBASE_NAMESPACE = 'default'            // Change if you're using a different namespace
        DB_POD_LABEL = 'app=mysql'                 // Adjust to match your MySQL pod label
    }

    stages {
        stage('Deploy MySql DB') {
            steps {
                script {
                    echo "Applying MySQL Kubernetes manifests..."
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-config.yaml"
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-secret.yaml"
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql.yaml"
                }
            }
        }

        stage('Wait for MySQL Pod') {
            steps {
                script {
                    echo "Waiting for MySQL pod to be ready..."
                    bat 'kubectl wait --for=condition=ready pod -l app=mysql --timeout=240s'
                }
            }
        }

        stage('Liquibase migration') {
            steps {
                script {
                    echo "Applying Liquibase job..."
                    bat "kubectl delete job %LIQUIBASE_JOB_NAME% --ignore-not-found -n %LIQUIBASE_NAMESPACE%"
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-liquibase-job.yaml"
                }
            }
        }

        stage('Wait for Liquibase Job') {
            steps {
                script {
                    echo "Waiting for Liquibase job to complete..."
                    def waitCommand = "kubectl wait --for=condition=complete --timeout=120s job/%LIQUIBASE_JOB_NAME% -n %LIQUIBASE_NAMESPACE%"
                    def result = bat(returnStatus: true, script: waitCommand)
                    if (result != 0) {
                        error("Liquibase job failed or timed out.")
                    }
                }
            }
        }

        stage('Deploying App Server') {
            steps {
                script {
                    echo "Applying App Server manifests..."
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\webapp.yaml"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to Minikube successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}