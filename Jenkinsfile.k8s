pipeline {
    agent any

    environment {
        K8S_MANIFEST_DIR = 'k8s'
    }

    stages {
        stage('Deploy MySql DB') {
            steps {
                script {
                    echo "Applying Kubernetes manifests..."
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-config.yaml"
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-secret.yaml"
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql.yaml"
                }
            }
        }
    }

    stage('Wait for MySQL Pod') {
                steps {
                    script {
                        echo "Waiting for MySQL pod to be ready..."
                        bat '''
                        :loop
                        FOR /F "tokens=*" %%i IN ('kubectl get pods -l %DB_POD_LABEL% -o jsonpath="{.items[0].status.containerStatuses[0].ready}"') DO (
                            SET "READY=%%i"
                        )
                        IF "%READY%"=="true" (
                            echo MySQL pod is ready.
                        ) ELSE (
                            timeout /t 5 >nul
                            goto loop
                        )
                        '''
                    }
                }
            }

    stages {
        stage('Liquibase migration') {
            steps {
                script {
                    echo "Applying Kubernetes manifests..."
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\mysql-liquibase-job.yaml"
                }
            }
        }
    }

    stage('Wait for Liquibase Job') {
                steps {
                    script {
                        echo "Waiting for Liquibase job to complete..."
                        // Wait for the job to succeed
                        def waitCommand = "kubectl wait --for=condition=complete --timeout=120s job/%LIQUIBASE_JOB_NAME% -n %LIQUIBASE_NAMESPACE%"
                        def result = bat(returnStatus: true, script: waitCommand)
                        if (result != 0) {
                            error("Liquibase job failed or timed out.")
                        }
                    }
                }
            }

    stage('Deploying app server') {
            steps {
                script {
                    echo "Applying Kubernetes manifests..."
                    bat "kubectl apply -f %K8S_MANIFEST_DIR%\\webapp.yaml"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to Minikube successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}